import { PolicyRecommendation, PolicySection, PolicySubsection } from '@/lib/aiReadinessEngine';
import { runOpenAI } from '@/lib/openai';

export interface InstitutionContext {
  name: string;
  type: 'community_college' | 'four_year_university' | 'graduate_program' | 'system_office';
  size: 'small' | 'medium' | 'large';
  region: string;
  specialFocus?: string;
}

export class PolicyGenerator {
  
  async generateCustomPolicy(
    policyRecommendation: PolicyRecommendation,
    institutionContext: InstitutionContext,
    assessmentResponses?: any
  ): Promise<string> {
    const prompt = this.buildPolicyPrompt(policyRecommendation, institutionContext, assessmentResponses);
    
    try {
      const policyContent = await runOpenAI(prompt, {
        model: 'gpt-4o',
        maxTokens: 4000,
        temperature: 0.3
      });
      
      return this.formatPolicyDocument(policyContent, policyRecommendation.title, institutionContext);
    } catch (error) {
      console.error('Error generating custom policy:', error);
      return this.generateFallbackPolicy(policyRecommendation, institutionContext);
    }
  }

  private buildPolicyPrompt(
    policyRecommendation: PolicyRecommendation,
    institutionContext: InstitutionContext,
    assessmentResponses?: any
  ): string {
    return `
      Create a comprehensive, implementation-ready AI policy for a ${institutionContext.type.replace('_', ' ')} institution.
      
      Institution Context:
      - Name: ${institutionContext.name}
      - Type: ${institutionContext.type.replace('_', ' ')}
      - Size: ${institutionContext.size}
      - Region: ${institutionContext.region}
      ${institutionContext.specialFocus ? `- Special Focus: ${institutionContext.specialFocus}` : ''}
      
      Policy Type: ${policyRecommendation.title}
      Priority Level: ${policyRecommendation.priority}
      
      Required Sections:
      ${policyRecommendation.sections.map(section => `- ${section.title}: ${section.content}`).join('\n')}
      
      Key Stakeholders: ${policyRecommendation.stakeholders.join(', ')}
      
      Implementation Steps:
      ${policyRecommendation.implementationSteps.map((step, index) => `${index + 1}. ${step}`).join('\n')}
      
      Please create a complete, professional policy document that includes:
      1. Policy Statement and Purpose
      2. Scope and Applicability
      3. Definitions and Key Terms
      4. Detailed Policy Provisions
      5. Procedures and Guidelines
      6. Responsibilities and Accountability
      7. Compliance and Monitoring
      8. Enforcement and Violations
      9. Review and Update Process
      10. Effective Date and Implementation
      
      Make the policy specific to higher education context, legally sound, and practical for implementation.
      Use clear, professional language appropriate for institutional policy documents.
      Include specific examples relevant to ${institutionContext.type.replace('_', ' ')} institutions.
    `;
  }

  private formatPolicyDocument(content: string, title: string, context: InstitutionContext): string {
    const header = `
${context.name.toUpperCase()}
${title.toUpperCase()}

Document Type: Institutional Policy
Effective Date: [To be determined by institutional approval process]
Review Date: [Annual review required]
Approved By: [Appropriate governance body]
Policy Owner: [To be assigned]

================================================================================
`;

    const footer = `
================================================================================

IMPLEMENTATION NOTES:
- This policy template should be reviewed by institutional legal counsel
- Stakeholder consultation required before implementation
- Integration with existing policies and procedures needed
- Training and communication plan required for effective rollout
- Regular monitoring and evaluation processes should be established

DISCLAIMER:
This policy template is provided for guidance purposes. Institutions should 
adapt content to their specific needs, legal requirements, and governance 
structures. Legal review is recommended before implementation.

Generated by NorthPath AI Readiness Assessment System
For support: support@northpathstrategies.org
`;

    return header + content + footer;
  }

  private generateFallbackPolicy(
    policyRecommendation: PolicyRecommendation,
    institutionContext: InstitutionContext
  ): string {
    const sections = policyRecommendation.sections.map(section => {
      return `
${section.title}
${'-'.repeat(section.title.length)}

${section.content}

${section.subsections ? section.subsections.map(sub => `
${sub.title}:
${sub.content}
`).join('\n') : ''}
`;
    }).join('\n\n');

    return this.formatPolicyDocument(
      `
POLICY STATEMENT AND PURPOSE
This policy establishes guidelines for ${policyRecommendation.title.toLowerCase()} at ${institutionContext.name}.

SCOPE AND APPLICABILITY
This policy applies to ${policyRecommendation.stakeholders.join(', ').toLowerCase()}.

POLICY PROVISIONS
${sections}

IMPLEMENTATION
Timeline: ${policyRecommendation.timeline}

Implementation Steps:
${policyRecommendation.implementationSteps.map((step, index) => `${index + 1}. ${step}`).join('\n')}
`,
      policyRecommendation.title,
      institutionContext
    );
  }

  async generatePolicyImplementationGuide(
    policies: PolicyRecommendation[],
    institutionContext: InstitutionContext
  ): Promise<string> {
    const prompt = `
      Create a comprehensive implementation guide for AI policies at ${institutionContext.name}.
      
      Institution Type: ${institutionContext.type.replace('_', ' ')}
      Institution Size: ${institutionContext.size}
      
      Policies to Implement:
      ${policies.map(p => `- ${p.title} (Priority: ${p.priority})`).join('\n')}
      
      Create a strategic implementation plan that includes:
      1. Prioritization and sequencing of policy implementation
      2. Stakeholder engagement strategy
      3. Change management approach
      4. Communication plan
      5. Training and professional development requirements
      6. Timeline and milestones
      7. Resource requirements
      8. Success metrics and evaluation methods
      9. Risk mitigation strategies
      10. Ongoing monitoring and updates
      
      Focus on practical, actionable guidance for higher education administrators.
    `;

    try {
      const guide = await runOpenAI(prompt, {
        model: 'gpt-4o',
        maxTokens: 3000,
        temperature: 0.4
      });
      
      return `
AI POLICY IMPLEMENTATION GUIDE
${institutionContext.name}

${guide}

This implementation guide was generated based on your AI Readiness Assessment results.
For personalized consultation, contact NorthPath Strategies.
`;
    } catch (error) {
      console.error('Error generating implementation guide:', error);
      return this.generateFallbackImplementationGuide(policies, institutionContext);
    }
  }

  private generateFallbackImplementationGuide(
    policies: PolicyRecommendation[],
    institutionContext: InstitutionContext
  ): string {
    const highPriority = policies.filter(p => p.priority === 'high');
    const mediumPriority = policies.filter(p => p.priority === 'medium');
    const lowPriority = policies.filter(p => p.priority === 'low');

    return `
AI POLICY IMPLEMENTATION GUIDE
${institutionContext.name}

IMPLEMENTATION PRIORITIZATION
==========================

Phase 1 (Months 1-3): High Priority Policies
${highPriority.map(p => `- ${p.title}`).join('\n')}

Phase 2 (Months 4-8): Medium Priority Policies  
${mediumPriority.map(p => `- ${p.title}`).join('\n')}

Phase 3 (Months 9-12): Low Priority Policies
${lowPriority.map(p => `- ${p.title}`).join('\n')}

STAKEHOLDER ENGAGEMENT
=====================
Key stakeholders across all policies:
${[...new Set(policies.flatMap(p => p.stakeholders))].join(', ')}

IMPLEMENTATION STEPS
==================
${policies.map(p => `
${p.title}:
${p.implementationSteps.map((step, index) => `  ${index + 1}. ${step}`).join('\n')}
`).join('\n')}

COMMUNICATION STRATEGY
====================
- Town halls for major policy announcements
- Department-specific training sessions
- Regular updates through institutional communications
- Feedback collection and policy refinement

SUCCESS METRICS
==============
- Policy awareness levels
- Compliance rates
- Stakeholder satisfaction
- Implementation milestone achievement
- Risk incident reduction
`;
  }

  generatePolicyChecklist(policyRecommendation: PolicyRecommendation): string[] {
    const baseChecklist = [
      'Review institutional governance requirements',
      'Identify all affected stakeholders',
      'Conduct legal review of policy language',
      'Align with existing institutional policies',
      'Develop implementation timeline',
      'Create training materials',
      'Establish monitoring procedures',
      'Plan communication strategy',
      'Identify policy champions',
      'Prepare enforcement procedures'
    ];

    const typeSpecificItems: { [key: string]: string[] } = {
      governance: [
        'Establish AI Ethics Committee',
        'Define data governance roles',
        'Create vendor evaluation criteria',
        'Develop risk assessment framework'
      ],
      pedagogy: [
        'Consult with Faculty Senate',
        'Pilot with volunteer faculty',
        'Create faculty resource library',
        'Develop course syllabus templates'
      ],
      student_policy: [
        'Update Student Handbook',
        'Train academic integrity officers',
        'Create student education modules',
        'Establish violation procedures'
      ],
      employee_policy: [
        'Consult with HR department',
        'Review union agreements if applicable',
        'Create role-specific guidelines',
        'Plan professional development'
      ]
    };

    return [
      ...baseChecklist,
      ...(typeSpecificItems[policyRecommendation.type] || [])
    ];
  }
}

export const policyGenerator = new PolicyGenerator();
