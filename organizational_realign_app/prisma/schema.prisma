// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "auth"]
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  name          String?
  organizations Organization[] @relation("OrganizationOwner")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@schema("auth")
}

model Organization {
  id          String   @id @default(uuid())
  name        String
  description String?
  owner       User     @relation("OrganizationOwner", fields: [ownerId], references: [id])
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@schema("public")
}

/// Stores each survey instance a user completes
model Survey {
  id          String    @id @default(uuid())
  userId      String    @map("user_id")
  institutionType String? @map("institution_type")
  startedAt   DateTime  @default(now()) @map("started_at")
  completedAt DateTime? @map("completed_at")

  // Relations
  answers Answer[]
  responses SurveyResponse[]

  @@index([userId])
  @@schema("public")
}

/// Stores individual answers tied to a Survey
model Answer {
  id        String   @id @default(uuid())
  surveyId  String   @map("survey_id")
  question  String
  valueInt  Int?
  valueText String?

  // Relations
  survey Survey @relation(fields: [surveyId], references: [id])

  @@index([surveyId])
  @@schema("public")
}

/// New table for survey responses (matches our app's needs)
model SurveyResponse {
  id            String   @id @default(uuid())
  userId        String   @map("user_id")
  surveyId      String?  @map("survey_id")
  questionId    String   @map("question_id")
  numericAnswer Int?     @map("numeric_answer")
  textAnswer    String?  @map("text_answer")
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  survey Survey? @relation(fields: [surveyId], references: [id])

  @@index([userId])
  @@index([questionId])
  @@map("survey_responses")
  @@schema("public")
}

/// Existing Supabase questions table (managed outside Prisma)
model Question {
  id       Int     @id
  section  Int?
  prompt   String?
  kind     String?
  scale    Int?

  @@map("questions")
  @@schema("public")
  @@ignore
}

/// Tracks user collaboration activities for analytics
model CollaborationEvent {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  assessmentId String?  @map("assessment_id")
  teamId       String?  @map("team_id")
  type         String   // EDIT, COMMENT, VIEW
  section      String?  // Section of the assessment
  metadata     Json?    // Additional data specific to event type
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@index([userId])
  @@index([assessmentId])
  @@index([teamId])
  @@index([type])
  @@index([createdAt])
  @@map("collaboration_events")
  @@schema("public")
}

/// Supabase's internal migration history table (leave untouched)
model SchemaMigration {
  version     String   @id
  inserted_at DateTime

  @@map("schema_migrations")
  @@schema("public")
  @@ignore
}

/// Scenario Modeling & ROI Engine Models

/// Stores scenario modeling data for organizational restructuring
model Scenario {
  id            String   @id @default(cuid())
  organizationId String  @map("organization_id")
  name          String
  description   String?
  baseline      Json     // uploaded org chart & costs structure
  variant       Json     // proposed organizational changes
  savings       Decimal? // cached result from ROI calculation
  costImpact    Decimal? @map("cost_impact") // total cost impact
  timeline      String?  // implementation timeline
  confidence    Float?   // confidence level (0.0-1.0)
  status        ScenarioStatus @default(DRAFT)
  
  // Metadata
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  createdBy     String   @map("created_by") // user who created the scenario
  
  // Relations
  roiCalculations ROICalculation[]
  scenarioVersions ScenarioVersion[]
  approvals ScenarioApproval[]

  @@index([organizationId])
  @@index([status])
  @@index([createdAt])
  @@map("scenarios")
  @@schema("public")
}

/// Tracks different versions of scenarios for change management
model ScenarioVersion {
  id          String   @id @default(cuid())
  scenarioId  String   @map("scenario_id")
  version     Int      // version number
  changes     Json     // what changed in this version
  baseline    Json     // snapshot of baseline at this version
  variant     Json     // snapshot of variant at this version
  createdAt   DateTime @default(now()) @map("created_at")
  createdBy   String   @map("created_by")
  
  // Relations
  scenario Scenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)

  @@unique([scenarioId, version])
  @@index([scenarioId])
  @@map("scenario_versions")
  @@schema("public")
}

/// Detailed ROI calculations and financial modeling
model ROICalculation {
  id              String   @id @default(cuid())
  scenarioId      String   @map("scenario_id")
  calculationType ROICalculationType @map("calculation_type")
  
  // Financial metrics
  initialCost     Decimal  @map("initial_cost")
  annualSavings   Decimal  @map("annual_savings")
  implementationCost Decimal @map("implementation_cost")
  operationalCost Decimal  @map("operational_cost")
  
  // ROI metrics
  roiPercentage   Decimal  @map("roi_percentage")
  paybackPeriod   Decimal  @map("payback_period") // in months
  npv             Decimal? // Net Present Value
  irr             Decimal? // Internal Rate of Return
  
  // Analysis details
  assumptions     Json     // key assumptions used
  riskFactors     Json     // identified risks
  sensitivityAnalysis Json? @map("sensitivity_analysis")
  
  // Metadata
  calculatedAt    DateTime @default(now()) @map("calculated_at")
  calculatedBy    String   @map("calculated_by")
  
  // Relations
  scenario Scenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)

  @@index([scenarioId])
  @@index([calculationType])
  @@map("roi_calculations")
  @@schema("public")
}

/// Approval workflow for scenarios
model ScenarioApproval {
  id          String   @id @default(cuid())
  scenarioId  String   @map("scenario_id")
  approverId  String   @map("approver_id")
  status      ApprovalStatus
  comments    String?
  approvedAt  DateTime? @map("approved_at")
  createdAt   DateTime @default(now()) @map("created_at")
  
  // Relations
  scenario Scenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)

  @@index([scenarioId])
  @@index([status])
  @@map("scenario_approvals")
  @@schema("public")
}

/// Cost center definitions for financial modeling
model CostCenter {
  id              String   @id @default(cuid())
  organizationId  String   @map("organization_id")
  name            String
  description     String?
  category        CostCenterCategory
  
  // Cost structure
  annualBudget    Decimal? @map("annual_budget")
  actualCost      Decimal? @map("actual_cost")
  costPerEmployee Decimal? @map("cost_per_employee")
  
  // Organizational mapping
  departmentCode  String?  @map("department_code")
  managerId       String?  @map("manager_id")
  parentCenterId  String?  @map("parent_center_id")
  
  // Metadata
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  // Relations
  parentCenter CostCenter? @relation("CostCenterHierarchy", fields: [parentCenterId], references: [id])
  childCenters CostCenter[] @relation("CostCenterHierarchy")

  @@index([organizationId])
  @@index([category])
  @@index([isActive])
  @@map("cost_centers")
  @@schema("public")
}

/// Benchmark data for comparative analysis
model BenchmarkData {
  id            String   @id @default(cuid())
  industry      String
  organizationSize String @map("organization_size")
  metric        String   // e.g., "span_of_control", "management_ratio"
  value         Decimal
  percentile    Int      // which percentile this represents
  source        String   // data source
  year          Int      // year of data
  region        String?  // geographical region
  
  // Metadata
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@unique([industry, organizationSize, metric, percentile, year])
  @@index([industry])
  @@index([metric])
  @@map("benchmark_data")
  @@schema("public")
}

// Enums for scenario modeling
enum ScenarioStatus {
  DRAFT
  UNDER_REVIEW
  APPROVED
  IMPLEMENTED
  ARCHIVED
  
  @@schema("public")
}

enum ROICalculationType {
  SIMPLE
  DETAILED
  MONTE_CARLO
  SENSITIVITY
  
  @@schema("public")
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  WITHDRAWN
  
  @@schema("public")
}

enum CostCenterCategory {
  OPERATIONS
  ADMINISTRATION
  SALES
  MARKETING
  TECHNOLOGY
  HUMAN_RESOURCES
  FINANCE
  RESEARCH_DEVELOPMENT
  CUSTOMER_SERVICE
  OTHER
  
  @@schema("public")
}

/// Org Chart Generation Models

/// Stores generated org charts and restructuring scenarios
model OrgChart {
  id            String   @id @default(uuid())
  assessmentId  String   @unique @map("assessment_id")
  svgUrl        String?  @map("svg_url") @db.VarChar(255)
  scenarios     Json?    // JSON containing baseline, moderate, aggressive scenarios
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Add relation when Assessment model is available
  // assessment    Assessment @relation(fields: [assessmentId], references: [id])

  @@map("org_charts")
  @@schema("public")
}

/// Stores position costs for org chart calculations
model PositionCost {
  id           String  @id @default(uuid())
  assessmentId String  @map("assessment_id")
  roleTitle    String  @map("role_title")
  fte          Float   // head-count fraction (0.5 = part-time, 1.0 = full-time)
  annualCost   Int     @map("annual_cost") // USD
  parentId     String? @map("parent_id") // for hierarchy building
  level        Int?    // organizational level (0 = top, 1 = direct reports, etc.)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@index([assessmentId])
  @@index([parentId])
  @@map("position_costs")
  @@schema("public")
}